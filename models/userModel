const bcrypt = require('bcryptjs'); // ici on a besoin de la librairie bcrypt
const saltRounds = 10;
let randomId = require('random-id'); // ici on appel le framework nmp librairie pour faire des id de manière random
let length = 30; // longueur de caratère de l'id
let pattern = 'aA0' // le model par lequel il faut 

module.exports = (_db)=> {
    db = _db
    return UserModel
}

class UserModel {
    
	static async saveOneUser(req){
	    //on hash le password
	    let hash = await bcrypt.hash(req.body.password, saltRounds);
	    //on génère un id personalisé
	    let key_id = randomId(len, pattern);
	    console.log(key_id)
	    
	    let user = await db.query('SELECT * FROM users WHERE email = ?', [req.body.email]);
	    
	    if(user.length > 0) {
			return {status: 501, msg: "email déjà utilisé"}
		}
	    //on sauvegarde l'utilisateur
	    return db.query('INSERT INTO users (firstName, lastName, email, password, role, creationTimestamp, validate, key_id) VALUES(?, ?, ?, ?, "commercial", NOW(), "no", ?)', [req.body.firstName, req.body.lastName, req.body.email, hash, key_id ])
		.then((result)=>{
			//on retourne l'objet de reponse reussit en lui rajoutant le key_id
			result.key_id = key_id
			return result
		}).catch((err)=>{
			return err
		})
	    
	}
	
	static async updateValidateUser(key_id){
	    let user = await db.query('UPDATE users SET validate = "yes" WHERE key_id = ?', [key_id]);

		return user;
	    
	}
	
	static async updateKeyId(email){
	    let key_id = randomId(len, pattern);
		
		let user = await db.query('UPDATE users SET key_id = ? WHERE email = ?', [key_id, email]);
		
		let result = {key_id: key_id, user: user}

		return result;
	    
	}
	
	static async updatepassword(newPassword, key_id){
	    //on crypte le password
	    let hash = await bcrypt.hash(newPassword, saltRounds);
		
		let result = await db.query('UPDATE users SET password = ? WHERE key_id = ?', [hash, key_id]);
		return result;
	}
	
	static async getUserByMail(email){
	    let user = await db.query('SELECT * FROM users WHERE email = ?', [email]);

		return user;
	}
}